spring.application.name=passwordms
server.port=8081

user-service.url=http://user:8082
password-service.url=http://password:8081


### h2 database
#spring.h2.console.enabled=true
#spring.datasource.url=jdbc:h2:mem:test
#spring.jpa.show-sql=true
#spring.jpa.hibernate.ddl-auto=create-drop

## postgresSQL
spring.datasource.url=jdbc:postgresql://postgres:5432/passworddb
spring.datasource.username=tulu
spring.datasource.password=0902
spring.jpa.database=POSTGRESQL
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.database-platform=org.hibernate.dialect.PostgresPlusDialect

##Eureka
eureka.client.serviceUrl.defaultZone=http://servicereg:8083/eureka/
eureka.client.register-with-eureka=true
eureka.client.fetch-registry=true

## resilience4j

### circuitbreaker config
# to enable info at health point
resilience4j.circuitbreaker.instances.userBreaker.registerHealthIndicator=true
# defines number of calls stored in sliding window
resilience4j.circuitbreaker.instances.userBreaker.slidingWindowSize=10
# minimum number of calls needed to consider failure rate
resilience4j.circuitbreaker.instances.userBreaker.minimumNumberOfCalls=5
# number of calls allowed in half open state
resilience4j.circuitbreaker.instances.userBreaker.permittedNumberOfCallsInHalfOpenState=3
# wait duration in open state
resilience4j.circuitbreaker.instances.userBreaker.waitDurationInOpenState=10s
# if failure rate is above 50% then circuit should move from close to open state
resilience4j.circuitbreaker.instances.userBreaker.failureRateThreshold=50
# register health indicator to actuator
resilience4j.circuitbreaker.instances.userBreaker.register-health-indicator=true
# auto transition from open to half open state
resilience4j.circuitbreaker.instances.userBreaker.automatic-transition-from-open-to-half-open-enabled=true
# sliding window type
resilience4j.circuitbreaker.instances.userBreaker.sliding-window-type=count_based

## retry module config
# max retry attempts
resilience4j.circuitbreaker.instances.userBreaker.max-attempt=5
# time limit to try again
resilience4j.circuitbreaker.instances.userBreaker.wait-duration=2s

## rate limiter module
resilience4j.circuitbreaker.instances.userBreaker.timeout-duration=3
resilience4j.circuitbreaker.instances.userBreaker.limit-refresh-period=4
resilience4j.circuitbreaker.instances.userBreaker.limit-for-period=2



## Actuator
# to see detailed info about endpoints
management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=health
management.endpoint.health.show-details=always